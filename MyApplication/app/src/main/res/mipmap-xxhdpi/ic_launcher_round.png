package com.example.basedatosmp16001;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
public class ControlBDCarnet{
    private static final String[]camposCliente = new String []
            {"id","nombre","apellido","direccion", "telefono"};
    private static final String[] camposCliente_Vehiculo = new String []
            {"idcliente","idvehiculo", "precio"};
    private static final String[] camposVehiculo = new String []
            {"idvehiculo","marca","modelo","anio"};
    private final Context context;
    private DatabaseHelper DBHelper;
    private SQLiteDatabase db;
    public ControlBDCarnet(Context ctx) {
        this.context = ctx;
        DBHelper = new DatabaseHelper(context);}
    private static class DatabaseHelper extends SQLiteOpenHelper {
        private static final String BASE_DATOS = "prueba.s3db";
        private static final int VERSION = 1;
        public DatabaseHelper(Context context) {
            super(context, BASE_DATOS, null, VERSION);
        }
        @Override
        public void onCreate(SQLiteDatabase db) {
            try{
                db.execSQL("CREATE TABLE [cliente_vehiculo] ([idcliente] VARCHAR(20) not NULL,[idvehiculo] vaRCHAR(20) not null, [precio] varchar(20)   not NULL,PRIMARY KEY ([idcliente],[idvehiculo]));");
                db.execSQL("CREATE TABLE [cliente] ([id] varchar(30)  NOT NULL PRIMARY KEY,[nombre] VARCHAR(50)  NOT NULL,[apellido] VARCHAR(30)  NOT NULL,[direccion] VARCHAR(50)  NOT NULL,[telefono] VARCHAR(50)  NOT NULL);");
                db.execSQL("CREATE TABLE [vehiculo] ([idvehiculo] vARCHAR(20)  PRIMARY KEY NOT NULL,[marca] vaRCHAR(20) NOT NULL,[modelo] vARCHAR(20) NOT NULL,[anio] vaRCHAR(20)   NOT NULL);");

            }catch(SQLException e){
                e.printStackTrace();
            }
        }
        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
// TODO Auto-generated method stub
        }
    }
    public void abrir() throws SQLException{
        db = DBHelper.getWritableDatabase();
        return;
    }
    public void cerrar(){
        DBHelper.close();
    }
    public String insertar(Cliente cliente){
        String regInsertados="Registro Insertado Nº= ";
        long contador=0;
        ContentValues alum = new ContentValues();
        alum.put("id", cliente.getIdVehiculo());
        alum.put("nombre", cliente.getIdCliente());
        alum.put("apellido", cliente.getApellido());
        alum.put("direccion", cliente.getDireccion());
        alum.put("telefono", cliente.getTelefono());
        contador=db.insert("cliente", null, alum);
        if(contador==-1 || contador==0)
        {
            regInsertados= "Error al Insertar el registro, Registro Duplicado. Verificar inserción";
        }
        else {
            regInsertados=regInsertados+contador;
        }
        return regInsertados;

    }
    public String insertar(ClienteVehiculo clienteVehiculo){
        String regInsertados="Registro Insertado Nº= ";
        long contador=0;
        if(verificarIntegridad(clienteVehiculo,1))
        {
            ContentValues notas = new ContentValues();
            notas.put("idcliente", clienteVehiculo.getIdCliente());
            notas.put("idvehiculo", clienteVehiculo.getIdVehiculo());
            notas.put("precio", clienteVehiculo.getPrecio());

            contador=db.insert("cliente_vehiculo", null, notas);
        }
        if(contador==-1 || contador==0)
        {
            regInsertados= "Error al Insertar el registro, Materia o carnet no existe, verificar inserccion";
        }
        else {
            regInsertados=regInsertados+contador;
        }
        return regInsertados;
    }
    public String insertar(Vehiculo vehiculo){

        String regInsertados="Registro Insertado Nº= ";
        long contador=0;
        ContentValues mate = new ContentValues();
        mate.put("idvehiculo", vehiculo.getIdvehiculo());
        mate.put("marca", vehiculo.getMarca());
        mate.put("modelo", vehiculo.getModelo());
        mate.put("anio", vehiculo.getAnio());
        contador=db.insert("vehiculo", null, mate);
        if(contador==-1 || contador==0)
        {
            regInsertados= "Error al Insertar el registro, Registro Duplicado. Verificar inserccion";
        }
        else {
            regInsertados=regInsertados+contador;
        }
        return regInsertados;
    }
    public String actualizar(Cliente cliente){

        if(verificarIntegridad(cliente, 5)){
            String[] id = {cliente.getIdVehiculo()};
            ContentValues cv = new ContentValues();
            cv.put("nombre", cliente.getIdCliente());
            cv.put("apellido", cliente.getApellido());
            cv.put("direccion", cliente.getDireccion());
            cv.put("telefono",cliente.getTelefono());
            db.update("cliente", cv, "id = ?", id);
            return "Registro Actualizado Correctamente";
        }else{
            return "Registro con carnet " + cliente.getIdVehiculo() + " no existe";
        }
    }
    public String actualizar(Vehiculo vehiculo){
        if(verificarIntegridad(vehiculo, 6)){
            String[] id = {vehiculo.getIdvehiculo()};
            ContentValues cv = new ContentValues();
            cv.put("marca", vehiculo.getMarca());
            cv.put("modelo", vehiculo.getModelo());
            cv.put("anio", vehiculo.getAnio());
            db.update("vehiculo",cv,"idvehiculo = ?",id);
            return "Materia Actualizada Correctamente";
        }
        else{
            return "Materia con codigo " + vehiculo.getIdvehiculo() + " no existe";
        }


    }
    public String actualizar(ClienteVehiculo clienteVehiculo){
        if(verificarIntegridad(clienteVehiculo, 2)){
            String[] id = {clienteVehiculo.getIdCliente(), clienteVehiculo.getIdVehiculo()};
            ContentValues cv = new ContentValues();
            cv.put("precio", clienteVehiculo.getPrecio());
            db.update("cliente_vehiculo", cv, "idcliente = ? AND idvehiculo = ? ", id);
            return "Registro Actualizado Correctamente";
        }else{
            return "Registro no Existe";
        }
    }
    public String eliminar(Cliente cliente){
        String regAfectados="filas afectadas= ";
        int contador=0;
        if (verificarIntegridad(cliente,3)) {
            contador+=db.delete("cliente_vehiculo", "idcliente='"+ cliente.getIdCliente()+"'", null);
        }
        contador+=db.delete("cliente", "id='"+ cliente.getIdCliente()+"'", null);
        regAfectados+=contador;
        return regAfectados;
    }
    public String eliminar(ClienteVehiculo clienteVehiculo){
        String regAfectados="filas afectadas= ";
        int contador=0;
        String where="idcliente='"+ clienteVehiculo.getIdCliente()+"'";
        where=where+" AND idvehiculo='"+ clienteVehiculo.getIdVehiculo()+"'";

        contador+=db.delete("cliente_vehiculo", where, null);
        regAfectados+=contador;
        return regAfectados;
    }
    public String eliminar(Vehiculo vehiculo){
        String regAfectados="filas afectadas= ";
        int contador=0;
       /* if (verificarIntegridad(vehiculo, 4)){
            contador+=db.delete("nota","codmateria='"+ vehiculo.getIdvehiculo()+"'",null);
        } */
        contador+=db.delete("vehiculo","idvehiculo='"+ vehiculo.getIdvehiculo()+"'",null);


        regAfectados+=contador;
        return  regAfectados;
    }
    public Cliente consultarCliente(String idCliente){

        String[] id = {idCliente};
        Cursor cursor = db.query("cliente", camposCliente, "id = ?",
                id, null, null, null);
        if(cursor.moveToFirst()){
            Cliente cliente = new Cliente();
            cliente.setIdVehiculo(cursor.getString(0));
            cliente.setIdCliente(cursor.getString(1));
            cliente.setApellido(cursor.getString(2));
            cliente.setDireccion(cursor.getString(3));
            cliente.setTelefono(cursor.getString(4));
            return cliente;
        }else{
            return null;
        }

    }
    public Vehiculo consultarVehiculo(String idvehiculo){
        String[] id = {idvehiculo};
        Cursor cursor = db.query("vehiculo", camposVehiculo, "idvehiculo = ?",
                id, null, null, null);
        if(cursor.moveToFirst()){
            Vehiculo vehiculo = new Vehiculo();
            vehiculo.setIdvehiculo(cursor.getString(0));
            vehiculo.setMarca(cursor.getString(1));
            vehiculo.setModelo(cursor.getString(2));
            vehiculo.setAnio(cursor.getString(3));
            return vehiculo;
        }else{
            return null;
        }
    }
    public ClienteVehiculo consultarNota(String idcliente, String idvehiculo){

        String[] id = {idcliente, idvehiculo};
        Cursor cursor = db.query("cliente_vehiculo", camposCliente_Vehiculo, "idcliente = ? AND idvehiculo = ?", id, null, null, null);
        if(cursor.moveToFirst()){
            ClienteVehiculo clienteVehiculo = new ClienteVehiculo();
            clienteVehiculo.setIdCliente(cursor.getString(0));
            clienteVehiculo.setIdVehiculo(cursor.getString(1));
            clienteVehiculo.setPrecio(cursor.getString(2));

            return clienteVehiculo;
        }else{
            return null;
        }

    }
    private boolean verificarIntegridad(Object dato, int relacion) throws SQLException{
        switch(relacion){case 1:
        {
//verificar que al insertar nota exista carnet del alumno y el codigo de materia
            ClienteVehiculo clienteVehiculo = (ClienteVehiculo)dato;
            String[] id1 = {clienteVehiculo.getIdCliente()};
            String[] id2 = {clienteVehiculo.getIdVehiculo()};
//abrir();
            Cursor cursor1 = db.query("cliente", null, "id = ?", id1, null,
                    null, null);
            Cursor cursor2 = db.query("vehiculo", null, "idvehiculo = ?", id2,
                    null, null, null);
            if(cursor1.moveToFirst() && cursor2.moveToFirst()){
//Se encontraron datos
                return true;
            }
            return false;
        }
            case 2:
            {
//verificar que al modificar nota exista carnet del alumno, el  codigo de materia y el ciclo
                ClienteVehiculo clienteVehiculo1 = (ClienteVehiculo)dato;
                String[] ids = {clienteVehiculo1.getIdCliente(), clienteVehiculo1.getIdVehiculo()};

                abrir();
                Cursor c = db.query("cliente_vehiculo", null, "idcliente = ? AND idvehiuclo = ? ", ids, null, null, null);
                if(c.moveToFirst()){
//Se encontraron datos
                    return true;
                }
                return false;
            }
            case 3:
            {
                Cliente cliente = (Cliente)dato;
                Cursor c=db.query(true, "nota", new String[] {
                                "id" }, "id='"+ cliente.getIdVehiculo()+"'",null,
                        null, null, null, null);
                if(c.moveToFirst())
                    return true;
                else
                    return false;
            }
            case 4:
            {
                Vehiculo vehiculo = (Vehiculo)dato;
                Cursor cmat=db.query(true, "nota", new String[] {
                                "codmateria" },
                        "codmateria='"+ ve